#pragma checksum "F:\core\Gourd\Gourd.IdentityService\Views\ApiResource\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a13b164e9b4c5de001cca13b91811044619ee912"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ApiResource_Index), @"mvc.1.0.view", @"/Views/ApiResource/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\core\Gourd\Gourd.IdentityService\Views\_ViewImports.cshtml"
using Gourd.IdentityService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\core\Gourd\Gourd.IdentityService\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "F:\core\Gourd\Gourd.IdentityService\Views\_ViewImports.cshtml"
using IdentityServer4.EntityFramework.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "F:\core\Gourd\Gourd.IdentityService\Views\_ViewImports.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a13b164e9b4c5de001cca13b91811044619ee912", @"/Views/ApiResource/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8cc31a1b7195ca8f8b2b96888064d5d96f9c8862", @"/Views/_ViewImports.cshtml")]
    public class Views_ApiResource_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("layadmin-themealias", new global::Microsoft.AspNetCore.Html.HtmlString("default"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "F:\core\Gourd\Gourd.IdentityService\Views\ApiResource\Index.cshtml"
  
    Layout = "/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a13b164e9b4c5de001cca13b91811044619ee9124328", async() => {
                WriteLiteral(@"
    <div class=""layui-fluid"">
        <div class=""layui-card"">
            <div class=""layui-form layui-card-header layuiadmin-card-header-auto"">
                <div class=""layui-form-item"">
                    <div class=""layui-inline"">
                        <label class=""layui-form-label"">资源名称</label>
                        <div class=""layui-input-block"">
                            <input type=""text"" id=""name"" name=""name"" placeholder=""请输入"" autocomplete=""off"" class=""layui-input"">
                        </div>
                    </div>
                    <div class=""layui-inline"">
                        <button id=""search"" class=""layui-btn"" data-type=""reload"">
                            <i class=""layui-icon layui-icon-search layuiadmin-button-btn""></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class=""layui-card-body"">
                <div style=""padding-bottom: 10px;"">
                    <button id=");
                WriteLiteral(@"""add"" class=""layui-btn layuiadmin-btn-useradmin"" data-type=""add"">添加</button>
                </div>
                <table class=""layui-hide"" id=""tableList"" lay-filter=""tableList""></table>
                <script>
                    layui.use('table', function () {
                        var table = layui.table;
                        table.render({
                            elem: '#tableList',
                            height: '600px'
                            , url: '/ApiResource/getlist'

                            , request: {
                                pageName: 'pageIndex' //页码的参数名称，默认：page
                                , limitName: 'pageSize' //每页数据量的参数名，默认：limit
                            }
                            , response: {
                                statusName: 'status' //规定数据状态的字段名称，默认：code
                                , statusCode: 0 //规定成功的状态码，默认：0
                                , msgName: 'msg' //规定状态信息的字段名称，默认：msg
                            ");
                WriteLiteral(@"    , countName: 'total' //规定数据总数的字段名称，默认：count
                                , dataName: 'data' //规定数据列表的字段名称，默认：data
                            }
                            , method: 'post'
                            , title: '用户数据表'
                            , cols: [[ //表头
                                { type: 'checkbox', fixed: 'left' },
                                {
                                    field: 'id', title: 'ID', minWidth: 80, sort: true, fixed: 'left'
                                }
                                , { field: 'name', title: '资源名称', minWidth: 80, fixed: 'left' }
                                , { field: 'displayName', title: '资源描述', minWidth: 80, fixed: 'left' }
                                , { fixed: 'right', templet: '#Operating', minWidth: 210, align: 'center', title: '操作' }
                            ]]
                            , id: 'tableList'
                            , limit: 20
                            , limits: [20, 30, ");
                WriteLiteral(@"40, 50, 60, 80, 100]
                            , page: true
                        });
                        //var $ = layui.$, active = {
                        //    reload: function () {
                        //        var username = $('#username');
                        //        var email = $('#email');
                        //        var sex = $('#sex');
                        //        //执行重载
                        //        table.reload('testReload', {
                        //            page: {
                        //                curr: 1 //重新从第 1 页开始
                        //            }
                        //            , where: {
                        //                key: {
                        //                    UserName: username.val(),
                        //                    Email: email.val(),
                        //                    Sex: sex.val()
                        //                }
                        //          ");
                WriteLiteral(@"  }
                        //        });
                        //    }
                        //};
                        //自定义事件
                        $('#add').on('click', function () {
                            layer.open({
                                type: 2,
                                area: ['450px', '300px'],
                                fixed: false, //不固定
                                maxmin: true,
                                content: '/apiresource/create',
                                btn: ['确定', '取消'],
                                yes: function (index, layero) {
                                    $(""#form"").length;//直接获取表单长度=0
                                    $(layero).find(""#form"").length;//表单长度还是等于0
                                    var submit = layero.find('iframe').contents().find(""#layuiadmin-app-form-submit"");
                                    submit.click();
                                }
                            });
         ");
                WriteLiteral(@"               })
                        $('#search').on('click', function () {
                            var name = $('#name');
                            //执行重载
                            table.reload('tableList', {
                                page: {
                                    curr: 1 //重新从第 1 页开始
                                }
                                , where: {
                                    Name: name.val(),
                                }
                            });
                            //var type = $(this).data('type');
                            //active[type] ? active[type].call(this) : '';
                        })
                        //监听表格排序问题
                        table.on('sort(tableList)', function (obj) { //注：tool是工具条事件名，tableList是table原始容器的属性 lay-filter=""对应的值""
                            console.log(obj.field); //当前排序的字段名
                            console.log(obj.type); //当前排序类型：desc（降序）、asc（升序）、null（空对象，默认排序）
       ");
                WriteLiteral(@"                     console.log(this); //当前排序的 th 对象
                            //尽管我们的 table 自带排序功能，但并没有请求服务端。
                            //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
                            table.reload('tableList', { //testTable是表格容器id
                                initSort: obj //记录初始排序，如果不设的话，将无法标记表头的排序状态。 layui 2.1.1 新增参数
                                , where: { //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
                                    sortKey: obj.field //排序字段
                                    , sortType: obj.type == ""desc"" ? 1 : 0 //排序方式
                                }
                            });
                        });
                        //头工具栏事件
                        table.on('toolbar(tableList)', function (obj) {
                            var checkStatus = table.checkStatus(obj.config.id);
                            switch (obj.event) {
                                case 'getCheckData':
                                    var data = chec");
                WriteLiteral(@"kStatus.data;
                                    layer.alert(JSON.stringify(data));
                                    break;
                                case 'getCheckLength':
                                    var data = checkStatus.data;
                                    layer.msg('选中了：' + data.length + ' 个');
                                    break;
                                case 'isAll':
                                    layer.msg(checkStatus.isAll ? '全选' : '未全选');
                                    break;
                            };
                        });
                        //监听行工具事件
                        table.on('tool(tableList)', function (obj) {
                            var data = obj.data;
                             if (obj.event === 'del') {
                                layer.confirm('确定删除么?', function (index) {
                                    var url = ""/apiresource/del"";
                                    var field = { Id: data.id");
                WriteLiteral(@" };
                                    $.post(url, field, function (data) {
                                        if (data.code == 200) {
                                            layui.table.reload('tableList'); //重载表格
                                            layer.msg(""操作成功!"", {
                                                time: 1000,
                                                icon: 1,
                                            });
                                        } else {
                                            layer.msg(""操作失败!"", {
                                                time: 1000,
                                                icon: 2,
                                            });
                                        }
                                    })
                                });
                            } else if (obj.event === 'edit') {
                                var url = ""?Id="" + data.id;
                                ");
                WriteLiteral(@"layui.use('layer', function () {
                                    var layer = layui.layer;
                                    layer.open({
                                        type: 2,
                                        area: ['450px', '300px'],
                                        fixed: false, //不固定
                                        maxmin: true,
                                        content: '/apiresource/edit' + url,
                                        title: '编辑',
                                        btn: ['确定', '取消'],
                                        yes: function (index, layero) {
                                            $(""#form"").length;//直接获取表单长度=0
                                            $(layero).find(""#form"").length;//表单长度还是等于0
                                            var submit = layero.find('iframe').contents().find(""#layuiadmin-app-form-edit"");
                                            submit.click();
                              ");
                WriteLiteral(@"          }
                                    });
                                });
                            }
                        });
                    });
                    function ValidateLog() {
                    }
                    //登录回调函数
                    function tips(data) {
                        alert(data);
                    }
                </script>

                <script type=""text/html"" id=""Operating"">
");
                WriteLiteral(@"                    <a class=""layui-btn layui-btn-xs"" lay-event=""edit""><i class=""layui-icon""></i>编辑</a>
                    <a class=""layui-btn layui-btn-danger layui-btn-xs"" lay-event=""del""><i class=""layui-icon""></i>删除</a>

                </script>

            </div>
        </div>
    </div>

    <div class=""layui-layer-move"" style=""cursor: move; display: none;""></div>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
